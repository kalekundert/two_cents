"""
Django settings for two_cents project.

Generated by 'django-admin startproject' using Django 2.1.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

ROOT_URLCONF = 'two_cents.urls'

WSGI_APPLICATION = 'two_cents.wsgi.application'

INSTALLED_APPS = [
        'two_cents.apps.TwoCentsConfig',
        'rest_framework',
        'django.contrib.admin',
        'django.contrib.auth',
        'django.contrib.contenttypes',
        'django.contrib.sessions',
        'django.contrib.messages',
        'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]


# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
    }
}

# Authentication
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

LOGIN_URL = 'login'

LOGIN_REDIRECT_URL = '2c_home'

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'America/New_York'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = '/static/'


# Deployment-specific settings:

class TwoCentsSettingsError(Exception):
    pass

try:
    site_settings_py = os.environ['TWO_CENTS_SITE_SETTINGS']
    not_found_error = f"site settings file not found: '{site_settings_py}'"
    
except KeyError:
    site_settings_py = os.path.join(BASE_DIR, 'site_settings.py')
    not_found_error = f"$TWO_CENTS_SITE_SETTINGS not specified, and default file not found: '{site_settings_py}'"

if not os.path.exists(site_settings_py):
    raise TwoCentsSettingsError(not_found_error)


# Execute the site settings in the current namespace.  I don't think this is 
# unsafe: the site settings file can execute arbitrary code, but if an attacker 
# could overwrite files on the web server, they could execute arbitrary code by 
# changing the daemon script anyways.  The advantages of this approach is that 
# the site settings file will have all the same syntax and power as the 
# standard Django settings file.

with open(site_settings_py) as f:
    exec(f.read())

# Check that all the necessary settings were specified.

necessary_settings = [
        'SECRET_KEY',
        'PLAID_CLIENT_ID',
        'PLAID_SECRET',
        'PLAID_PUBLIC_KEY',
        'PLAID_ENVIRONMENT',
]

for setting in necessary_settings:
    if setting not in globals():
        raise TwoCentsSettingsError(f"missing required setting: {setting}")
